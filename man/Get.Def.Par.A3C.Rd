% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AsynchronousAdvantageActorCritic.R
\name{Get.Def.Par.A3C}
\alias{Get.Def.Par.A3C}
\title{Get Default Parameters of A3C.}
\usage{
Get.Def.Par.A3C()
}
\description{
Returns a list with the following items \itemize{
 \item \strong{Return Typ} Specifies how  returns are are modified for the gradient calculations. This should be either N.Steps or GAE.
 \item \strong{N.Steps.Max} How many rounds should be played before a weight update. Also specifies the number of actual returns before bootstrapping.
 \item \strong{gamma.return} Discount Factor used for discounting future returns.
 \item \strong{lambda.advantage} [only used in case of GAE] General Advantage Estimator.
 \item \strong{N.Worker} Sets the number of parallel agents.     
 \item \strong{show.current.status} How often should the mean score be calculated and displayed.
 \item \strong{Full.Output} If set to TRUE the memory of the worker is pushed to the master.
 \item \strong{Transfer.Output.every} For performance reasons this should not be to low and for memory limitations this should not be to high.
 \item \strong{max.mem.per.worker} How many Episodes should be stored for each worker.
 \item \strong{use.e.greedy.per.worker} Should be a boolean vector e.g. c(TRUE,TRUE) specifying the workers which use egreedy-exploration strategy.
 \item \strong{epsilon.start} Starting Value for epsilon. Higher Values encourage exploration.
 \item \strong{epsilon.decay} Specifies a linear decay for the value of epsilon.
 \item \strong{epsilon.min} Lower boundarie for the value of epsilon.
 \item \strong{save.Master.Network} If set to TRUE weights of the Master Network are saved at the location given by save.path.
 \item \strong{save.every} Specifies the number of episodes after which an additional parameter set should be stored.
 \item \strong{save.path} File Path to store and load weights of a Network. Defaults to the working directory.
 \item \strong{upload.file.name} Name of the file to upload weights. Whole file path consists \code{save.path} and \code{upload.file.name}.
 \item \strong{shiny.visualize} If TRUE the memory of the first worker is prepared to be visualized in shiny.
 \item \strong{shiny.append.file} If FALSE shiny data will be pushed to the shiny app at playing time. If FALSE a large file is created which can be uploaded to the shiny app.
 \item \strong{train} If FALSE  no training is taking place. Instead network weights are loaded from the location given by save.path.
 
}
}
